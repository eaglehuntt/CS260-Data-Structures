1. Based on what we know about linked lists, stacks, and queues, design a linked queue (a queue using a linked-list to store the data in the structure) 

- Done (See linked_queue.cpp)

2. Design, implement, and test a Queue data structure that:

    uses a linked-list to store values in the queue

    has an enqueue method that will appropriately add a value to the back of the queue as an appropriate element

    has a dequeue method that will appropriately remove an element from the front of the queue and return its value

    Optionally has a peek method that returns the value at the front of the queue without removing it

    Bonus if you also create an array based Queue!

- Done (See linked_queue.cpp)

3. Analyze the complexity of your implementations (at least the run-time of the add, remove, and peek methods).

    (Note that we will often consider operations not having to do with the structure as O(1), even if they might be expensive operations in terms of real-time or space used)
    (Note that if you are not in class when we talk about Asymptotic Big-O notation, you can find tons of good examples online)

    enqueue: O(1)
    dequeue: O(1)
    peek_head: O(1)


4. Tests: Be sure to include at least one test for each piece of functionality that should verify that your code is working!
- Done (See main.cpp)